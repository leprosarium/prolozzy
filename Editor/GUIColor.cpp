//////////////////////////////////////////////////////////////////////////////////////////////////
// GUIColor.cpp
//////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "GUIColor.h"
#include "GUI.h"
#include "E9App.h"
#include "R9ImgLoader.h"

//////////////////////////////////////////////////////////////////////////////////////////////////
// cGUIColorPick
//////////////////////////////////////////////////////////////////////////////////////////////////
cGUIColorPick::cGUIColorPick()
{
}

cGUIColorPick::~cGUIColorPick()
{
}

void cGUIColorPick::Update()
{
	RECT rc;
	GetScrRect(rc);
	m_mousein = INRECT( g_gui->m_mousex, g_gui->m_mousey, rc);
	int mx = g_gui->m_mousex - rc.left;
	int my = g_gui->m_mousey - rc.top;
	
	if(m_mousein && m_img.isValid())
	{
		float x = ((float)mx / (rc.right-rc.left))*m_img.m_width;
		float y = ((float)my / (rc.bottom-rc.top))*m_img.m_height;
		color[0] = m_img.getColor((int)x,(int)y);

		if(I9_GetKeyUp(I9_MOUSE_B1))
		{
			cmdActionParam = 1;
			Action();
		}
		else
		if(I9_GetKeyUp(I9_MOUSE_B2))
		{
			cmdActionParam = 2;
			Action();
		}
		else
		{
			std::ostringstream o;
			o << std::hex << std::uppercase << std::setfill('0') << std::setw(6) << (color[0] & 0x00ffffff);
			g_gui->ToolTip = o.str();
		}
	}
	
}

void cGUIColorPick::Draw()
{
	return; // don't draw anything
}

/////////////////////////////////////////////////////////////////////////////////////////////////
// Access
//////////////////////////////////////////////////////////////////////////////////////////////////

void cGUIColorPick::LoadImg(const std::string & nm )
{
	txt = nm;
	R9_ImgDestroy(&m_img);
	R9_ImgLoadFile(nm, &m_img);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
